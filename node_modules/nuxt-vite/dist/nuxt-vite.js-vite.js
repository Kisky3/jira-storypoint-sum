'use strict';

const path = require('path');
const vite = require('vite');
const consola = require('consola');
const vitePluginVue2 = require('vite-plugin-vue2');
const PluginLegacy = require('@vitejs/plugin-legacy');
const upath = require('upath');
const fsExtra = require('fs-extra');
const crypto = require('crypto');
const createResolver = require('postcss-import-resolver');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () {
            return e[k];
          }
        });
      }
    });
  }
  n['default'] = e;
  return Object.freeze(n);
}

const vite__namespace = /*#__PURE__*/_interopNamespace(vite);
const consola__default = /*#__PURE__*/_interopDefaultLegacy(consola);
const PluginLegacy__default = /*#__PURE__*/_interopDefaultLegacy(PluginLegacy);
const fsExtra__default = /*#__PURE__*/_interopDefaultLegacy(fsExtra);
const createResolver__default = /*#__PURE__*/_interopDefaultLegacy(createResolver);

const needsJsxProcessing = (id = "") => !id.includes("node_modules") && [".vue", ".jsx", ".tsx"].some((extension) => id.includes(extension));
function jsxPlugin() {
  return {
    name: "nuxt:jsx",
    transform(code, id) {
      if (!needsJsxProcessing(id)) {
        return null;
      }
      return {
        code: code.replace(/render\s*\(\s*\)\s*\{/g, "render(h){"),
        map: null
      };
    }
  };
}

function replace(replacements) {
  return {
    name: "nuxt:replace",
    transform(code) {
      Object.entries(replacements).forEach(([key, value]) => {
        const escapedKey = key.replace(/\./g, "\\.");
        code = code.replace(new RegExp(escapedKey, "g"), value);
      });
      return {
        code,
        map: null
      };
    }
  };
}

async function buildClient(ctx) {
  const alias = {};
  for (const p of ctx.builder.plugins) {
    alias[p.name] = p.mode === "server" ? `defaultexport:${path.resolve(ctx.nuxt.options.buildDir, "empty.js")}` : `defaultexport:${p.src}`;
  }
  if (ctx.nuxt.options.dev) {
    alias["/_nuxt"] = ctx.nuxt.options.buildDir;
  }
  const clientConfig = vite__namespace.mergeConfig(ctx.config, {
    define: {
      "process.server": false,
      "process.client": true,
      "process.static": false,
      global: "window",
      "module.hot": false
    },
    cacheDir: path.resolve(ctx.nuxt.options.rootDir, "node_modules/.cache/vite/client"),
    resolve: {
      alias
    },
    build: {
      outDir: path.resolve(ctx.nuxt.options.buildDir, "dist/client"),
      assetsDir: ".",
      rollupOptions: {
        input: path.resolve(ctx.nuxt.options.buildDir, "client.js")
      },
      manifest: true,
      ssrManifest: true
    },
    plugins: [
      replace({ "process.env": "import.meta.env" }),
      jsxPlugin(),
      vitePluginVue2.createVuePlugin(ctx.config.vue),
      PluginLegacy__default['default']()
    ],
    server: {
      middlewareMode: true
    }
  });
  await ctx.nuxt.callHook("vite:extendConfig", clientConfig, { isClient: true, isServer: false });
  if (!ctx.nuxt.options.dev) {
    const start = Date.now();
    consola__default['default'].info("Building client...");
    await vite__namespace.build(clientConfig);
    consola__default['default'].success(`Client built in ${Date.now() - start}ms`);
    return;
  }
  const viteServer = await vite__namespace.createServer(clientConfig);
  await ctx.nuxt.callHook("vite:serverCreated", viteServer);
  const viteMiddleware = (req, res, next) => {
    const originalURL = req.url;
    viteServer.middlewares.handle(req, res, (err) => {
      req.url = originalURL;
      next(err);
    });
  };
  await ctx.nuxt.callHook("server:devMiddleware", viteMiddleware);
  ctx.nuxt.hook("close", async () => {
    await viteServer.close();
  });
}

const wpfs = {
  ...fsExtra__default['default'],
  join: upath.join
};

const DEFAULT_APP_TEMPLATE = `
<!DOCTYPE html>
<html {{ HTML_ATTRS }}>
<head {{ HEAD_ATTRS }}>
  {{ HEAD }}
</head>
<body {{ BODY_ATTRS }}>
  {{ APP }}
</body>
</html>
`;
async function prepareManifests(ctx) {
  const rDist = (...args) => path.resolve(ctx.nuxt.options.buildDir, "dist", ...args);
  await fsExtra.mkdirp(rDist("server"));
  const customAppTemplateFile = path.resolve(ctx.nuxt.options.srcDir, "app.html");
  const APP_TEMPLATE = fsExtra.existsSync(customAppTemplateFile) ? await fsExtra.readFile(customAppTemplateFile, "utf-8") : DEFAULT_APP_TEMPLATE;
  const DEV_TEMPLATE = APP_TEMPLATE.replace("</body>", '<script type="module" src="/@vite/client"><\/script><script type="module" src="/_nuxt/client.js"><\/script></body>');
  const SPA_TEMPLATE = ctx.nuxt.options.dev ? DEV_TEMPLATE : APP_TEMPLATE;
  const SSR_TEMPLATE = ctx.nuxt.options.dev ? DEV_TEMPLATE : APP_TEMPLATE;
  await fsExtra.writeFile(rDist("server/index.ssr.html"), SSR_TEMPLATE);
  await fsExtra.writeFile(rDist("server/index.spa.html"), SPA_TEMPLATE);
  if (ctx.nuxt.options.dev) {
    await stubManifest(ctx);
  } else {
    await generateBuildManifest(ctx);
  }
}
async function generateBuildManifest(ctx) {
  const rDist = (...args) => path.resolve(ctx.nuxt.options.buildDir, "dist", ...args);
  const publicPath = ctx.nuxt.options.app.assetsPath;
  const viteClientManifest = await fsExtra.readJSON(rDist("client/manifest.json"));
  const clientEntries = Object.entries(viteClientManifest);
  const asyncEntries = uniq(clientEntries.filter((id) => id[1].isDynamicEntry).flatMap(getModuleIds)).filter(Boolean);
  const initialEntries = uniq(clientEntries.filter((id) => !id[1].isDynamicEntry).flatMap(getModuleIds)).filter(Boolean);
  const initialJs = initialEntries.filter(isJS);
  const initialAssets = initialEntries.filter(isCSS);
  const polyfillName = initialEntries.find((id) => id.startsWith("polyfills-legacy."));
  const clientImports = initialJs.filter((id) => id !== polyfillName).map((id) => publicPath + id);
  const clientEntryCode = `var imports = ${JSON.stringify(clientImports)}
imports.reduce((p, id) => p.then(() => System.import(id)), Promise.resolve())`;
  const clientEntryName = "entry-legacy." + hash(clientEntryCode) + ".js";
  const clientManifest = {
    publicPath,
    all: uniq([
      polyfillName,
      clientEntryName,
      ...clientEntries.flatMap(getModuleIds)
    ]).filter(Boolean),
    initial: [
      polyfillName,
      clientEntryName,
      ...initialAssets
    ],
    async: [
      ...initialJs,
      ...asyncEntries
    ],
    modules: {},
    assetsMapping: {}
  };
  const serverManifest = {
    entry: "server.js",
    files: {
      "server.js": "server.js",
      ...Object.fromEntries(clientEntries.map(([id, entry]) => [id, entry.file]))
    },
    maps: {}
  };
  await fsExtra.writeFile(rDist("client", clientEntryName), clientEntryCode, "utf-8");
  await writeClientManifest(clientManifest, ctx.nuxt.options.buildDir);
  await writeServerManifest(serverManifest, ctx.nuxt.options.buildDir);
  await fsExtra.remove(rDist("client/manifest.json"));
  await fsExtra.remove(rDist("client/ssr-manifest.json"));
}
async function stubManifest(ctx) {
  const clientManifest = {
    publicPath: "",
    all: [
      "empty.js"
    ],
    initial: [
      "empty.js"
    ],
    async: [],
    modules: {},
    assetsMapping: {}
  };
  const serverManifest = {
    entry: "server.js",
    files: {
      "server.js": "server.js"
    },
    maps: {}
  };
  await writeClientManifest(clientManifest, ctx.nuxt.options.buildDir);
  await writeServerManifest(serverManifest, ctx.nuxt.options.buildDir);
}
async function generateDevSSRManifest(ctx) {
  const rDist = (...args) => path.resolve(ctx.nuxt.options.buildDir, "dist", ...args);
  const ssrManifest = await fsExtra.readJSON(rDist("server/ssr-manifest.json"));
  const css = Object.keys(ssrManifest).filter(isCSS);
  const fixedCss = css.map((i) => `../${i}`);
  const clientManifest = {
    publicPath: "",
    all: [
      "empty.js",
      ...fixedCss
    ],
    initial: [
      "empty.js",
      ...fixedCss
    ],
    async: [],
    modules: {},
    assetsMapping: {}
  };
  await writeClientManifest(clientManifest, ctx.nuxt.options.buildDir);
}
async function writeServerManifest(serverManifest, buildDir) {
  const serverManifestJSON = JSON.stringify(serverManifest, null, 2);
  await fsExtra.writeFile(path.resolve(buildDir, "dist/server/server.manifest.json"), serverManifestJSON, "utf-8");
  await fsExtra.writeFile(path.resolve(buildDir, "dist/server/server.manifest.mjs"), `export default ${serverManifestJSON}`, "utf-8");
}
async function writeClientManifest(clientManifest, buildDir) {
  const clientManifestJSON = JSON.stringify(clientManifest, null, 2);
  await fsExtra.writeFile(path.resolve(buildDir, "dist/server/client.manifest.json"), clientManifestJSON, "utf-8");
  await fsExtra.writeFile(path.resolve(buildDir, "dist/server/client.manifest.mjs"), `export default ${clientManifestJSON}`, "utf-8");
}
function hash(input, length = 8) {
  return crypto.createHash("sha256").update(input).digest("hex").substr(0, length);
}
function uniq(arr) {
  return Array.from(new Set(arr));
}
const IS_JS_RE = /\.[cm]?js(\?[^.]+)?$/;
const HAS_EXT_RE = /[^./]+\.[^./]+$/;
const IS_CSS_RE = /\.css(\?[^.]+)?$/;
function isJS(file) {
  return IS_JS_RE.test(file) || !HAS_EXT_RE.test(file);
}
function isCSS(file) {
  return IS_CSS_RE.test(file);
}
function getModuleIds([, value]) {
  if (!value) {
    return [];
  }
  return [value.file, ...value.css || []].filter((id) => isCSS(id) || id.match(/-legacy\./));
}

async function buildServer(ctx) {
  const _env = process.env.NODE_ENV;
  process.env.NODE_ENV = "production";
  const vuePlugin = vitePluginVue2.createVuePlugin(ctx.config.vue);
  process.env.NODE_ENV = _env;
  const alias = {};
  for (const p of ctx.builder.plugins) {
    alias[p.name] = p.mode === "client" ? `defaultexport:${path.resolve(ctx.nuxt.options.buildDir, "empty.js")}` : `defaultexport:${p.src}`;
  }
  const serverConfig = vite__namespace.mergeConfig(ctx.config, {
    define: {
      "process.server": true,
      "process.client": false,
      "process.static": false,
      "typeof window": '"undefined"',
      "typeof document": '"undefined"',
      "typeof navigator": '"undefined"',
      "typeof location": '"undefined"',
      "typeof XMLHttpRequest": '"undefined"'
    },
    cacheDir: path.resolve(ctx.nuxt.options.rootDir, "node_modules/.cache/vite/server"),
    resolve: {
      alias
    },
    ssr: {
      external: [
        "axios"
      ],
      noExternal: [
        ...ctx.nuxt.options.build.transpile.filter((i) => typeof i === "string")
      ]
    },
    build: {
      outDir: path.resolve(ctx.nuxt.options.buildDir, "dist/server"),
      assetsDir: ctx.nuxt.options.app.assetsPath.replace(/^\/|\/$/, ""),
      ssr: true,
      ssrManifest: true,
      rollupOptions: {
        input: path.resolve(ctx.nuxt.options.buildDir, "server.js"),
        onwarn(warning, rollupWarn) {
          if (!["UNUSED_EXTERNAL_IMPORT"].includes(warning.code)) {
            rollupWarn(warning);
          }
        }
      }
    },
    plugins: [
      jsxPlugin(),
      vuePlugin
    ]
  });
  await ctx.nuxt.callHook("vite:extendConfig", serverConfig, { isClient: false, isServer: true });
  const onBuild = () => ctx.nuxt.callHook("build:resources", wpfs);
  if (!ctx.nuxt.options.dev) {
    const start = Date.now();
    consola__default['default'].info("Building server...");
    await vite__namespace.build(serverConfig);
    await onBuild();
    consola__default['default'].success(`Server built in ${Date.now() - start}ms`);
  } else {
    const watcher = await vite__namespace.build({
      ...serverConfig,
      build: {
        ...serverConfig.build,
        watch: {
          include: [
            upath.join(ctx.nuxt.options.buildDir, "**/*"),
            upath.join(ctx.nuxt.options.srcDir, "**/*"),
            upath.join(ctx.nuxt.options.rootDir, "**/*")
          ],
          exclude: [
            "**/dist/server/**"
          ]
        }
      }
    });
    let start = Date.now();
    watcher.on("event", async (event) => {
      if (event.code === "BUNDLE_START") {
        start = Date.now();
      } else if (event.code === "BUNDLE_END") {
        await generateDevSSRManifest(ctx);
        await onBuild();
        consola__default['default'].info(`Server rebuilt in ${Date.now() - start}ms`);
      } else if (event.code === "ERROR") {
        consola__default['default'].error(event.error);
      }
    });
    ctx.nuxt.hook("close", () => watcher.close());
  }
}

const PREFIX = "defaultexport:";
const hasPrefix = (id = "") => id.startsWith(PREFIX);
const removePrefix = (id = "") => hasPrefix(id) ? id.substr(PREFIX.length) : id;
const hasDefaultExport = (code = "") => code.includes("export default");
const addDefaultExport = (code = "") => code + "\n\nexport default () => {}";
function defaultExportPlugin() {
  return {
    name: "nuxt:default-export",
    enforce: "pre",
    resolveId(id, importer) {
      if (hasPrefix(id)) {
        return id;
      }
      if (importer && hasPrefix(importer)) {
        return this.resolve(id, removePrefix(importer));
      }
      return null;
    },
    async load(id) {
      if (hasPrefix(id)) {
        let code = await fsExtra.readFile(removePrefix(id), "utf8");
        if (!hasDefaultExport(code)) {
          code = addDefaultExport(code);
        }
        return { map: null, code };
      }
      return null;
    }
  };
}

function isObject(val) {
  return val !== null && typeof val === "object";
}
function _defu(baseObj, defaults, namespace = ".", merger) {
  if (!isObject(defaults)) {
    return _defu(baseObj, {}, namespace, merger);
  }
  const obj = Object.assign({}, defaults);
  for (const key in baseObj) {
    if (key === "__proto__" || key === "constructor") {
      continue;
    }
    const val = baseObj[key];
    if (val === null || val === void 0) {
      continue;
    }
    if (merger && merger(obj, key, val, namespace)) {
      continue;
    }
    if (Array.isArray(val) && Array.isArray(obj[key])) {
      obj[key] = obj[key].concat(val);
    } else if (isObject(val) && isObject(obj[key])) {
      obj[key] = _defu(val, obj[key], (namespace ? `${namespace}.` : "") + key.toString(), merger);
    } else {
      obj[key] = val;
    }
  }
  return obj;
}
function extend(merger) {
  return (...args) => args.reduce((p, c) => _defu(p, c, "", merger), {});
}
const defu = extend();
defu.fn = extend((obj, key, currentValue, _namespace) => {
  if (typeof obj[key] !== "undefined" && typeof currentValue === "function") {
    obj[key] = currentValue(obj[key]);
    return true;
  }
});
defu.arrayFn = extend((obj, key, currentValue, _namespace) => {
  if (Array.isArray(obj[key]) && typeof currentValue === "function") {
    obj[key] = currentValue(obj[key]);
    return true;
  }
});
defu.extend = extend;

function resolveCSSOptions(nuxt) {
  const css = {
    postcss: {
      plugins: []
    }
  };
  const plugins = defu(nuxt.options.build.postcss.plugins, {
    "postcss-import": {
      resolve: createResolver__default['default']({
        alias: { ...nuxt.options.alias },
        modules: [
          nuxt.options.srcDir,
          nuxt.options.rootDir,
          ...nuxt.options.modulesDir
        ]
      })
    },
    "postcss-url": {},
    "postcss-preset-env": nuxt.options.build.postcss.preset || {}
  });
  for (const name in plugins) {
    const opts = plugins[name];
    if (!opts) {
      continue;
    }
    const plugin = nuxt.resolver.requireModule(name);
    css.postcss.plugins.push(plugin(opts));
  }
  return css;
}

async function warmupViteServer(server, entries) {
  const warmedUrls = new Set();
  const warmup = async (url) => {
    if (warmedUrls.has(url)) {
      return void 0;
    }
    warmedUrls.add(url);
    try {
      await server.transformRequest(url);
    } catch (e) {
      consola__default['default'].debug("Warmup for %s failed with: %s", url, e);
    }
    const deps = Array.from(server.moduleGraph.urlToModuleMap.get(url).importedModules);
    await Promise.all(deps.map((m) => warmup(m.url)));
  };
  await Promise.all(entries.map((entry) => warmup(entry)));
}

async function bundle(nuxt, builder) {
  for (const p of builder.plugins) {
    p.src = nuxt.resolver.resolvePath(path.resolve(nuxt.options.buildDir, p.src));
  }
  const ctx = {
    nuxt,
    builder,
    config: vite__namespace.mergeConfig(nuxt.options.vite || {}, {
      root: nuxt.options.rootDir,
      mode: nuxt.options.dev ? "development" : "production",
      logLevel: "warn",
      define: {
        "process.dev": nuxt.options.dev
      },
      resolve: {
        extensions: [".mjs", ".js", ".ts", ".jsx", ".tsx", ".json", ".vue"],
        alias: {
          ...nuxt.options.alias,
          "~": nuxt.options.srcDir,
          "@": nuxt.options.srcDir,
          "web-streams-polyfill/ponyfill/es2018": require.resolve("./runtime/mock/web-streams-polyfill.mjs"),
          "abort-controller": require.resolve("./runtime/mock/abort-controller.mjs")
        }
      },
      vue: {},
      server: {
        fs: {
          strict: false
        }
      },
      css: resolveCSSOptions(nuxt),
      optimizeDeps: {
        exclude: [
          "ufo",
          "date-fns",
          "nanoid"
        ]
      },
      esbuild: {
        jsxFactory: "h",
        jsxFragment: "Fragment"
      },
      publicDir: path.resolve(nuxt.options.srcDir, nuxt.options.dir.static),
      clearScreen: false,
      build: {
        emptyOutDir: false
      },
      plugins: [
        replace({
          __webpack_public_path__: "globalThis.__webpack_public_path__"
        }),
        jsxPlugin(),
        defaultExportPlugin()
      ]
    })
  };
  const i18nAlias = ctx.config.resolve.alias["~i18n-klona"];
  if (i18nAlias) {
    ctx.config.resolve.alias["~i18n-klona"] = i18nAlias.replace(".js", ".mjs");
  }
  await ctx.nuxt.callHook("vite:extend", ctx);
  if (nuxt.options.dev) {
    ctx.nuxt.hook("vite:serverCreated", (server) => {
      const start = Date.now();
      warmupViteServer(server, ["/_nuxt/client.js"]).then(() => {
        consola__default['default'].info(`Vite warmed up in ${Date.now() - start}ms`);
      }).catch(consola__default['default'].error);
    });
  }
  await buildClient(ctx);
  await prepareManifests(ctx);
  await buildServer(ctx);
}
class ViteBuilder {
  constructor(builder) {
    this.builder = builder;
    this.nuxt = builder.nuxt;
  }
  build() {
    return bundle(this.nuxt, this.builder);
  }
}

exports.ViteBuilder = ViteBuilder;
